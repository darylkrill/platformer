group 'com.stexni'
version '0.1.0'

buildscript {
    repositories {
        mavenCentral()
    }
    configurations.maybeCreate("pitest")
    dependencies {
        classpath 'info.solidsoft.gradle.pitest:gradle-pitest-plugin:1.1.10'
    }
}

apply plugin: 'java'
apply plugin: 'application'

apply plugin: 'jacoco'
apply plugin: 'findbugs'
apply plugin: 'pmd'
apply plugin: 'info.solidsoft.pitest'

sourceCompatibility = 1.8
def appName = 'platformer'
mainClassName = 'com.stexni.platformer.Application'

repositories {
    mavenCentral()
}

dependencies {
    compile group: 'org.apache.logging.log4j', name: 'log4j-slf4j-impl', version: '2.9.0'
    compile group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.9.0'

    testCompile group: 'junit', name: 'junit', version: '4.12'
}

jar {
    baseName = appName
    manifest {
        attributes 'Implementation-Title': 'Stexni Platformer',
                'Implementation-Version': version,
                'Main-Class': mainClassName
    }
}

startScripts {
    applicationName = appName
    defaultJvmOpts = ['-Xms128M', '-Xmx512M']
}

distributions {
    main {
        baseName = appName
    }
}

run {
    if (project.hasProperty('args')) {
        def temp = project.args.findAll(/((-[A-Za-z]|-{2}\w+)([=|\s]('.*?'|".*?"|\w+))?)/)
        args = temp.collect {
            def output = it
            def equals = it.indexOf("=")
            if (equals != -1) {
                if (it.charAt(equals + 1) == "\"" || it.charAt(equals + 1) == "'") {
                    output = it.substring(0, equals + 1) + it.substring(equals + 2, it.length() - 1)
                }
            }

            return output
        }
    }
}

test {
    finalizedBy jacocoTestReport
    testLogging {
        //Turn this on to show logging during tests.
        showStandardStreams = false
    }
}

task openReports(type: Exec) {
    commandLine './open-reports.sh'
    ignoreExitValue = true
}

findbugs {
    sourceSets = [sourceSets.main]
}

tasks.withType(FindBugs) {
    reports {
        xml.enabled false
        html.enabled true
    }
}

tasks.findByName('check').dependsOn 'pitest'
tasks.findByName('pitest').mustRunAfter 'test'

pitest {
    threads = Runtime.runtime.availableProcessors()
    //mutationThreshold = 50
    timestampedReports = false
}