group 'com.stexni'
version '0.1.0'

buildscript {
    repositories {
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    configurations.maybeCreate("pitest")
    dependencies {
        classpath 'info.solidsoft.gradle.pitest:gradle-pitest-plugin:1.1.10'
        classpath 'net.ltgt.gradle:gradle-errorprone-plugin:0.0.10'
    }
}

apply plugin: 'java'
apply plugin: 'application'

apply plugin: 'jacoco'
apply plugin: 'findbugs'
apply plugin: 'pmd'
apply plugin: 'info.solidsoft.pitest'
apply plugin: 'net.ltgt.errorprone'

sourceCompatibility = 1.8
def appName = 'platformer'
mainClassName = 'com.stexni.platformer.Application'

repositories {
    mavenCentral()
}

import org.gradle.internal.os.OperatingSystem

switch (OperatingSystem.current()) {
    case OperatingSystem.WINDOWS:
        project.ext.lwjglNatives = "natives-windows"
        break
    case OperatingSystem.LINUX:
        project.ext.lwjglNatives = "natives-linux"
        break
    case OperatingSystem.MAC_OS:
        project.ext.lwjglNatives = "natives-macos"
        break
}

project.ext.lwjglVersion = "3.1.0"

dependencies {
    compile group: 'org.apache.logging.log4j', name: 'log4j-slf4j-impl', version: '2.9.0'
    compile group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.9.0'

    // LWJGL dependencies START
    compile "org.lwjgl:lwjgl:${lwjglVersion}"
    compile "org.lwjgl:lwjgl-glfw:${lwjglVersion}"
    compile "org.lwjgl:lwjgl-jemalloc:${lwjglVersion}"
    compile "org.lwjgl:lwjgl-nanovg:${lwjglVersion}"
    compile "org.lwjgl:lwjgl-nfd:${lwjglVersion}"
    compile "org.lwjgl:lwjgl-nuklear:${lwjglVersion}"
    compile "org.lwjgl:lwjgl-openal:${lwjglVersion}"
    compile "org.lwjgl:lwjgl-opengl:${lwjglVersion}"
    compile "org.lwjgl:lwjgl-par:${lwjglVersion}"
    compile "org.lwjgl:lwjgl-stb:${lwjglVersion}"
    compile "org.lwjgl:lwjgl-tinyfd:${lwjglVersion}"
    compile "org.lwjgl:lwjgl-vulkan:${lwjglVersion}"
    // LWJGL natives
    runtime "org.lwjgl:lwjgl:${lwjglVersion}:${lwjglNatives}"
    runtime "org.lwjgl:lwjgl-glfw:${lwjglVersion}:${lwjglNatives}"
    runtime "org.lwjgl:lwjgl-jemalloc:${lwjglVersion}:${lwjglNatives}"
    runtime "org.lwjgl:lwjgl-nanovg:${lwjglVersion}:${lwjglNatives}"
    runtime "org.lwjgl:lwjgl-nfd:${lwjglVersion}:${lwjglNatives}"
    runtime "org.lwjgl:lwjgl-nuklear:${lwjglVersion}:${lwjglNatives}"
    runtime "org.lwjgl:lwjgl-openal:${lwjglVersion}:${lwjglNatives}"
    runtime "org.lwjgl:lwjgl-par:${lwjglVersion}:${lwjglNatives}"
    runtime "org.lwjgl:lwjgl-stb:${lwjglVersion}:${lwjglNatives}"
    runtime "org.lwjgl:lwjgl-tinyfd:${lwjglVersion}:${lwjglNatives}"
    // LWJGL dependencies END

    testCompile group: 'junit', name: 'junit', version: '4.12'
}

jar {
    baseName = appName
    manifest {
        attributes 'Implementation-Title': 'Stexni Platformer',
                'Implementation-Version': version,
                'Main-Class': mainClassName
    }
}

configurations.errorprone {
    resolutionStrategy.force 'com.google.errorprone:error_prone_core:2.1.1'
}

startScripts {
    applicationName = appName
    defaultJvmOpts = ['-Xms128M', '-Xmx512M']
}

distributions {
    main {
        baseName = appName
    }
}

run {
    if (project.hasProperty('args')) {
        def temp = project.args.findAll(/((-[A-Za-z]|-{2}\w+)([=|\s]('.*?'|".*?"|\w+))?)/)
        args = temp.collect {
            def output = it
            def equals = it.indexOf("=")
            if (equals != -1) {
                if (it.charAt(equals + 1) == "\"" || it.charAt(equals + 1) == "'") {
                    output = it.substring(0, equals + 1) + it.substring(equals + 2, it.length() - 1)
                }
            }

            return output
        }
    }
}

test {
    finalizedBy jacocoTestReport
    testLogging {
        //Turn this on to show logging during tests.
        showStandardStreams = false
    }
}

task openReports(type: Exec) {
    commandLine './open-reports.sh'
    ignoreExitValue = true
}

findbugs {
    sourceSets = [sourceSets.main]
}

tasks.withType(FindBugs) {
    reports {
        xml.enabled false
        html.enabled true
    }
}

tasks.findByName('check').dependsOn 'pitest'
tasks.findByName('pitest').mustRunAfter 'test'

pitest {
    threads = Runtime.runtime.availableProcessors()
    //mutationThreshold = 50
    timestampedReports = false
}